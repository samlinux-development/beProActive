type WorkoutsPerUserResponse = 
 record {
   date: Time;
   duration: Time;
   exercises: vec Exercise;
 };
type WorkoutPayload = 
 record {
   duration: Time;
   exercises: vec Exercise;
 };
type Workout = 
 record {
   date: Time;
   duration: Time;
   exercises: vec Exercise;
 };
type Time = int;
type Main = 
 service {
   addFriend: (principal) -> (bool);
   addWorkout: (WorkoutPayload) -> (bool);
   createUserProfile: () -> (bool);
   getAllUsers: () -> (vec record {
                             principal;
                             text;
                           }) query;
   getAllWorkouts: () ->
    (vec record {
           principal;
           record {workouts: vec record {
                                   nat;
                                   Workout;
                                 };};
         }) query;
   getLatestWorkouts: () -> (vec record {
                                   nat;
                                   LatestWorkouts;
                                 }) query;
   getPublicReports: () -> (GetPublicReportsResponse) query;
   getUserFeed: () -> (vec record {
                             principal;
                             Feed;
                           }) query;
   getUserProfile: () -> (GetUserProfileResponse) query;
   getWorkoutReports: (nat16) -> (GetWorkoutReportsResponse) query;
   getWorkoutsPerPrincipal: () -> (vec WorkoutsPerUserResponse) query;
   removeFriend: (principal) -> (bool);
   setMaxPublicWorkouts: (nat) -> (bool);
   updateProfile: (text) -> (bool);
 };
type LatestWorkouts = 
 record {
   alias: text;
   date: Time;
   exercises: vec Exercise;
 };
type GetWorkoutReportsResponse = 
 record {
   totalExercises: nat;
   totalRepsPerExercise: nat16;
   totalSetsPerExercise: nat16;
   totalWorkouts: nat;
 };
type GetUserProfileResponse = 
 record {
   alias: text;
   friends: vec principal;
   totalWorkouts: nat;
 };
type GetPublicReportsResponse = record {totalUsers: nat;};
type Feed = 
 record {
   alias: text;
   workouts: vec record {
                   nat;
                   Workout;
                 };
 };
type Exercise = 
 record {
   kg: nat16;
   repetition: nat16;
   seconds: nat;
   set: nat16;
   typeOfExercise: nat16;
 };
service : () -> Main
